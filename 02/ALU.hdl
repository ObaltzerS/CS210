// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    
    //zero inputs
    /*
        zx and zy are used to simply choose between 
        the original inputs and zero.

        zxout, zxout: carry output to next step
    */
    Mux16(a=x, b=false, sel=zx, out[0..15]=zxout0);
    Mux16(a=y, b=false, sel=zy, out[0..15]=zyout0);
    //negate inputs
    /*
        compute the inverse of each input, then choose between
        that negated input and the output of the previous step.

        midx, : carry output to next step
    */
    Not16(in=zxout0, out[0..15]=notzxout);
    Not16(in=zyout0, out[0..15]=notzyout);
    Mux16(a=zxout0, b=notzxout, sel=nx, out[0..15]=zxout1);
    Mux16(a=zyout0, b=notzyout, sel=ny, out[0..15]=zyout1);
    //compute out
    /*
        compute both x & y and x + y, choose between these two computations 
        using f

        xycomp: carries output to next step
    */
    And16(a=zxout1, b=zyout1, out[0..15]=xandy);
    Add16(a=zxout1, b=zyout1, out[0..15]=xaddy);
    Mux16(a=xandy, b=xaddy, sel=f, out[0..15]=xycomp);
    //negate output
    /*
        compute inverse of xycomp, choose between the inverse 
        and xycomp

        testout07, testout815: carry output to test if zero
        negindicator: carry just the last bit to test whether the 16 bit input is negative
        out: output of chip
    */
    Not16(in=xycomp, out[0..15]=notxycomp);
    Mux16(a=xycomp, b=notxycomp, sel=no, out[0..7]=testout07, out[8..15]=testout815);
    Mux16(a=xycomp, b=notxycomp, sel=no, out[15]=negindicator);
    Mux16(a=xycomp, b=notxycomp, sel=no, out=out);
    //zero test
    /*
        test whether the computed output is zero

        zr: one bit indicator of whether output is zero
    */
    Or8Way(in=testout07, out=halfout0);
    Or8Way(in=testout815, out=halfout1);
    Or(a=halfout0, b=halfout1, out=allor);
    Not(in=allor, out=zr);
    //negative test
    /*
        test whether the computed output is negative

        ng: one bit indicator of whether output is zero
    */
    And(a=negindicator, b=true, out=ng);
}